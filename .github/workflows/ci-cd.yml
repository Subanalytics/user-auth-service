name: CI/CD - User Auth Service OneClick

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'k8s/**'  # Ignore k8s changes to prevent loops
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests and go straight to deployment'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment even if health checks fail'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Deployment environment'
        required: false
        default: 'analytics'
        type: choice
        options:
          - analytics
          - staging
          - production

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/user-auth-service
  SERVICE_NAME: user-auth-service
  NAMESPACE: analytics

permissions:
  contents: read

jobs:
  # ======================
  # CI STAGE - Build & Test
  # ======================
  ci-build-test:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    outputs:
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      git-sha: ${{ steps.build-info.outputs.git-sha }}
      should-deploy: ${{ steps.build-info.outputs.should-deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        continue-on-error: true
        run: npm run lint || echo "Linting completed with warnings"

      - name: Run security audit
        continue-on-error: true
        run: npm audit --audit-level high || echo "Security audit completed"

      - name: Run tests
        run: |
          if npm run test:coverage 2>/dev/null; then
            echo "✅ Tests with coverage completed"
          elif npm test 2>/dev/null; then
            echo "✅ Tests completed"
          else
            echo "⚠️ No test script found, skipping tests"
          fi

      - name: Set build info
        id: build-info
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="${GIT_SHA}-$(date +%s)"
          echo "git-sha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "🏗️ Build info: $IMAGE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.git-sha }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Container security scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.git-sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: trivy-results.sarif
          retention-days: 30

  # ======================
  # CD STAGE - Deploy to Kubernetes
  # ======================
  cd-deploy:
    runs-on: self-hosted
    needs: ci-build-test
    if: always() && (needs.ci-build-test.result == 'success' || github.event.inputs.skip_tests == 'true')
    
    steps:
      # ======================
      # Checkout and Setup
      # ======================
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Set deployment variables
        run: |
          if [[ "${{ github.event.inputs.skip_tests }}" == "true" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
            echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ needs.ci-build-test.outputs.git-sha }}" >> $GITHUB_ENV
            echo "GIT_SHA=${{ needs.ci-build-test.outputs.git-sha }}" >> $GITHUB_ENV
          fi
          
          DEPLOY_ENV="${{ github.event.inputs.environment }}"
          echo "NAMESPACE=${DEPLOY_ENV:-analytics}" >> $GITHUB_ENV

      # ======================
      # Infrastructure Setup
      # ======================
      - name: Setup Namespace and Core Infrastructure
        run: |
          echo "=== Setting up core infrastructure ==="
          
          # Create namespace if it doesn't exist
          if ! kubectl get namespace ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            echo "Creating namespace: ${{ env.NAMESPACE }}"
            kubectl create namespace ${{ env.NAMESPACE }}
          else
            echo "✅ Namespace exists: ${{ env.NAMESPACE }}"
          fi
          
          # Apply namespace-level resources if they exist
          if [[ -d "k8s/namespace" ]]; then
            kubectl apply -f k8s/namespace/ || echo "No namespace configs found"
          fi
          
          echo "✅ Core infrastructure setup complete"

      - name: Setup RBAC and Security
        run: |
          echo "=== Setting up RBAC and Security ==="
          
          # Apply RBAC configs if they exist in your repo
          if [[ -d "k8s/rbac" ]]; then
            kubectl apply -f k8s/rbac/ -n ${{ env.NAMESPACE }} || echo "No RBAC configs found"
          fi
          
          # Create service account for user-auth service
          kubectl apply -f - <<EOF || echo "Service account already exists"
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: user-auth-sa
            namespace: ${{ env.NAMESPACE }}
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: user-auth-role
            namespace: ${{ env.NAMESPACE }}
          rules:
          - apiGroups: [""]
            resources: ["services", "pods", "configmaps", "secrets"]
            verbs: ["get", "list", "watch"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: user-auth-rolebinding
            namespace: ${{ env.NAMESPACE }}
          subjects:
          - kind: ServiceAccount
            name: user-auth-sa
            namespace: ${{ env.NAMESPACE }}
          roleRef:
            kind: Role
            name: user-auth-role
            apiGroup: rbac.authorization.k8s.io
          EOF
          
          echo "✅ RBAC setup complete"

      # ======================
      # Deploy User Auth Service
      # ======================
      - name: Deploy User Auth Service
        run: |
          echo "=== Deploying User Auth Service ==="
          
          # Update the image tag in deployment
          if [[ -f "k8s/user-auth-deployment.yaml" ]]; then
            # Create updated deployment with new image tag
            sed "s|image: tush1809/user-auth:latest|image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" \
              k8s/user-auth-deployment.yaml > temp-deployment.yaml
            
            kubectl apply -f temp-deployment.yaml -n ${{ env.NAMESPACE }}
            rm temp-deployment.yaml
          else
            # Create deployment from scratch if it doesn't exist
            kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: user-auth-deployment
            namespace: ${{ env.NAMESPACE }}
            labels:
              app: user-auth-service
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: user-auth-service
            template:
              metadata:
                labels:
                  app: user-auth-service
              spec:
                serviceAccountName: user-auth-sa
                containers:
                - name: user-auth
                  image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  ports:
                    - containerPort: 5000
                  env:
                    - name: NODE_ENV
                      value: "production"
                    - name: PORT
                      value: "5000"
                  resources:
                    requests:
                      cpu: 100m
                      memory: 128Mi
                    limits:
                      cpu: 500m
                      memory: 512Mi
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 5000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 5000
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF
          fi
          
          echo "✅ Deployment applied"

      - name: Apply Service and Networking
        run: |
          echo "=== Setting up Service and Networking ==="
          
          # Apply service
          if [[ -f "k8s/user-auth-service.yaml" ]]; then
            kubectl apply -f k8s/user-auth-service.yaml -n ${{ env.NAMESPACE }}
          else
            kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: user-auth-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: user-auth-service
            ports:
              - protocol: TCP
                port: 5000
                targetPort: 5000
            type: ClusterIP
          EOF
          fi
          
          # Apply HPA if it exists
          if [[ -f "k8s/user-auth-hpa.yaml" ]]; then
            kubectl apply -f k8s/user-auth-hpa.yaml -n ${{ env.NAMESPACE }}
          fi
          
          # Apply network policies if they exist
          if [[ -d "k8s/networkpolicies" ]]; then
            kubectl apply -f k8s/networkpolicies/ -n ${{ env.NAMESPACE }} || echo "No network policies found"
          fi
          
          echo "✅ Service and networking configured"

      - name: Wait for deployment rollout
        run: |
          echo "=== Waiting for deployment rollout ==="
          kubectl rollout status deployment/user-auth-deployment -n ${{ env.NAMESPACE }} --timeout=300s
          echo "✅ Deployment rollout completed"

      # ======================
      # Post-Deployment Verification
      # ======================
      - name: Verify deployment
        run: |
          echo "=== Verifying deployment ==="
          
          echo "Deployment status:"
          kubectl get deployment user-auth-deployment -n ${{ env.NAMESPACE }} -o wide
          
          echo ""
          echo "Pod status:"
          kubectl get pods -l app=user-auth-service -n ${{ env.NAMESPACE }} -o wide
          
          echo ""
          echo "Service status:"
          kubectl get svc user-auth-service -n ${{ env.NAMESPACE }} -o wide

      - name: Health check
        run: |
          echo "=== Running health checks ==="
          
          # Wait for pods to be ready
          kubectl wait --for=condition=Ready \
            pods -l app=user-auth-service \
            -n ${{ env.NAMESPACE }} \
            --timeout=300s || echo "⚠️ Some pods not ready"
          
          # Test service connectivity
          SERVICE_IP=$(kubectl get svc user-auth-service -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.clusterIP}')
          SERVICE_PORT=$(kubectl get svc user-auth-service -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.ports[0].port}')
          
          if [[ -n "$SERVICE_IP" && -n "$SERVICE_PORT" ]]; then
            echo "Testing service at $SERVICE_IP:$SERVICE_PORT"
            kubectl run health-check-temp \
              --image=curlimages/curl:latest \
              --rm -i --restart=Never \
              -n ${{ env.NAMESPACE }} \
              -- curl -f -m 10 "http://$SERVICE_IP:$SERVICE_PORT/health" || \
              echo "⚠️ Health endpoint test failed"
          fi

  # ======================
  # DAST Security Testing
  # ======================
  security-scan:
    runs-on: self-hosted
    needs: cd-deploy
    continue-on-error: true
    
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Discover service endpoint
        id: discover
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"
          
          # Get service details
          SERVICE_IP=$(kubectl get svc user-auth-service -n "$NAMESPACE" -o jsonpath='{.spec.clusterIP}' 2>/dev/null || echo "")
          SERVICE_PORT=$(kubectl get svc user-auth-service -n "$NAMESPACE" -o jsonpath='{.spec.ports[0].port}' 2>/dev/null || echo "5000")
          
          if [[ -n "$SERVICE_IP" ]]; then
            TARGET_URL="http://$SERVICE_IP:$SERVICE_PORT"
            echo "url=$TARGET_URL" >> $GITHUB_OUTPUT
            echo "Found service endpoint: $TARGET_URL"
          else
            echo "url=" >> $GITHUB_OUTPUT
            echo "No service endpoint found"
          fi

      - name: Run OWASP ZAP Security Scan
        if: steps.discover.outputs.url != ''
        run: |
          echo "=== Running DAST Security Scan ==="
          
          mkdir -p security-reports
          
          docker run --rm \
            --network host \
            -v "$(pwd)/security-reports:/zap/wrk" \
            owasp/zap2docker-stable \
            zap-baseline.py \
              -t "${{ steps.discover.outputs.url }}" \
              -r "user-auth-security-report.html" \
              -J "user-auth-security-results.json" \
              -x "user-auth-security-report.xml" \
              -I || echo "Security scan completed with findings"

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: user-auth-security-reports
          path: security-reports/
          retention-days: 30

  # ======================
  # Deployment Summary
  # ======================
  deployment-summary:
    runs-on: self-hosted
    needs: [ci-build-test, cd-deploy, security-scan]
    if: always()
    
    steps:
      - name: Generate deployment report
        run: |
          echo "=== USER AUTH SERVICE DEPLOYMENT REPORT ===" > deployment-report.txt
          echo "Deployment Date: $(date)" >> deployment-report.txt
          echo "Git SHA: ${{ env.GIT_SHA }}" >> deployment-report.txt
          echo "Image Tag: ${{ env.IMAGE_TAG }}" >> deployment-report.txt
          echo "Namespace: ${{ env.NAMESPACE }}" >> deployment-report.txt
          echo "Triggered by: ${{ github.event_name }}" >> deployment-report.txt
          echo "" >> deployment-report.txt
          
          echo "=== JOB RESULTS ===" >> deployment-report.txt
          echo "CI Build & Test: ${{ needs.ci-build-test.result }}" >> deployment-report.txt
          echo "CD Deploy: ${{ needs.cd-deploy.result }}" >> deployment-report.txt
          echo "Security Scan: ${{ needs.security-scan.result }}" >> deployment-report.txt
          echo "" >> deployment-report.txt
          
          if command -v kubectl >/dev/null; then
            echo "=== FINAL STATUS ===" >> deployment-report.txt
            kubectl get all -l app=user-auth-service -n ${{ env.NAMESPACE }} >> deployment-report.txt 2>&1 || echo "Status check failed" >> deployment-report.txt
          fi

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: user-auth-deployment-report
          path: deployment-report.txt
          retention-days: 30

      - name: Final deployment status
        run: |
          if [[ "${{ needs.cd-deploy.result }}" == "success" ]]; then
            echo "🎉 USER AUTH SERVICE DEPLOYMENT SUCCESSFUL!"
            echo "✅ Service deployed to namespace: ${{ env.NAMESPACE }}"
            echo "✅ Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            echo "✅ All health checks passed"
            echo "📊 Check artifacts for security scan results"
          else
            echo "❌ USER AUTH SERVICE DEPLOYMENT FAILED!"
            echo "Check the logs above for details"
            exit 1
          fi
          
